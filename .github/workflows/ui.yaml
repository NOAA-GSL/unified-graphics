name: "UI Build"
on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'
    branches: [ $default-branch ]
    # Path filters aren't evaluated for tags - https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushpull_requestpull_request_targetpathspaths-ignore
    paths:
      - '.nvmrc'
      - 'services/ui/**'
  pull_request:
    paths:
      - '.nvmrc'
      - 'services/ui/**'
    branches: [ $default-branch ]
env:
  REGISTRY: ghcr.io/noaa-gsl/unified-graphics/ui

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: 'services/ui/package-lock.json'
      - name: Install dependencies
        working-directory: services/ui
        run: npm ci
      - name: Lint
        working-directory: services/ui
        run: npm run lint
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: 'services/ui/package-lock.json'
      - name: Install dependencies
        working-directory: services/ui
        run: npm ci
      - name: Check
        working-directory: services/ui
        run: npm run check
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: 'services/ui/package-lock.json'
      - name: Install dependencies
        working-directory: services/ui
        run: npm ci
      - name: Test
        working-directory: services/ui
        run: |
          npx playwright install-deps
          npm test
  build:
    runs-on: ubuntu-latest
    needs: [lint, check, test]
    steps:
      - uses: actions/checkout@v3
      - name: Extract branch/tag name
        shell: bash
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            # PR build
            echo "BRANCH=${GITHUB_HEAD_REF}" >> ${GITHUB_ENV}
          elif [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
            # Handle differences between branches/tags
            if [[ "${GITHUB_REF}" == *"heads"* ]]; then
              # Branch build
              echo "BRANCH=${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}
            elif [[ "${GITHUB_REF}" == *"tags"* ]]; then
              # Tag build
              echo "BRANCH=${GITHUB_REF#refs/tags/}" >> ${GITHUB_ENV}
            else
              echo "ERROR: Unanticipated Git Ref"
              exit 1
            fi
          else
            echo "ERROR: Unanticipated GitHub Event"
            exit 1
          fi
      - name: Build & tag image
        run: |
          docker build -t ${{ env.REGISTRY }}:${{ env.BRANCH }} services/ui
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push image
        run: |
          docker push ${{ env.REGISTRY }}:${{ env.BRANCH }}
  scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Extract branch/tag name
        shell: bash
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            # PR build
            echo "BRANCH=${GITHUB_HEAD_REF}" >> ${GITHUB_ENV}
          elif [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
            # Handle differences between branches/tags
            if [[ "${GITHUB_REF}" == *"heads"* ]]; then
              # Branch build
              echo "BRANCH=${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}
            elif [[ "${GITHUB_REF}" == *"tags"* ]]; then
              # Tag build
              echo "BRANCH=${GITHUB_REF#refs/tags/}" >> ${GITHUB_ENV}
            else
              echo "ERROR: Unanticipated Git Ref"
              exit 1
            fi
          else
            echo "ERROR: Unanticipated GitHub Event"
            exit 1
          fi
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}:${{ env.BRANCH }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
